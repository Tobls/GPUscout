#
# Make file for pc_sampling_utility - COMMENT THIS FIRST and then RUN THIS
#
ifndef OS
    OS   := $(shell uname)
    HOST_ARCH := $(shell uname -m)
endif

#CUDA_INSTALL_PATH ?= /usr/local/cuda-11.8
#CUDA_INSTALL_PATH ?= /home/ge25neh2/sv_spack/opt/spack/linux-sles15-skylake_avx512/gcc-7.5.0/cuda-11.7.1-2cxahuehwgxjnnb5ubp5sufh72m6eaym
CUDA_INSTALL_PATH ?= @CUDAToolkit_LIBRARY_ROOT@
# for ice1
# /home/di75gix/spack_ice/spack/opt/spack/linux-sles15-icelake/gcc-11.2.0/cuda-11.6.1-kyml5npftoxnbwu7ylslw7pxpnwv2tmu
NVCC := "$(CUDA_INSTALL_PATH)/bin/nvcc"
INCLUDES := -I"$(CUDA_INSTALL_PATH)/include" -I$(CUDA_INSTALL_PATH)/extras/CUPTI/samples/callback_profiling/../../include

ifeq ($(OS),Windows_NT)
    LIB_PATH ?= ..\..\lib64
else
    EXTRAS_LIB_PATH := $(CUDA_INSTALL_PATH)/extras/CUPTI/samples/callback_profiling/../../lib64
    LIB_PATH ?= $(CUDA_INSTALL_PATH)/lib64
endif

ifeq ($(OS),Windows_NT)
    export PATH := $(PATH):$(LIB_PATH)
    LIBS= -lcuda -L $(LIB_PATH) -lcupti -lpcsamplingutil
else
    ifeq ($(OS), Darwin)
        export DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):$(LIB_PATH)
        LIBS= -Xlinker -framework -Xlinker cuda -L $(EXTRAS_LIB_PATH) -L $(LIB_PATH) -lcupti -lpcsamplingutil
    else
        export LD_LIBRARY_PATH := $(LD_LIBRARY_PATH):$(LIB_PATH)
        LIBS = -L $(LIB_PATH) -lcuda -L $(EXTRAS_LIB_PATH) -lcupti -lpcsamplingutil
    endif
endif

NVCCFLAGS :=
ifneq ($(TARGET_ARCH), $(HOST_ARCH))
    ifeq ($(TARGET_ARCH), aarch64)
        ifeq ($(TARGET_OS), linux)
            HOST_COMPILER ?= aarch64-linux-gnu-g++
        else ifeq ($(TARGET_OS),qnx)
            ifeq ($(QNX_HOST),)
                $(error ERROR - QNX_HOST must be passed to the QNX host toolchain)
            endif
            ifeq ($(QNX_TARGET),)
                $(error ERROR - QNX_TARGET must be passed to the QNX target toolchain)
            endif
            HOST_COMPILER ?= $(QNX_HOST)/usr/bin/q++
            NVCCFLAGS += --qpp-config 8.3.0,gcc_ntoaarch64le -lsocket
        endif
    endif

    ifdef HOST_COMPILER
        NVCC_COMPILER := -ccbin $(HOST_COMPILER)
    endif
endif

all: pc_sampling_utility
pc_sampling_utility: pc_sampling_utility.cpp
	$(NVCC) $(NVCC_COMPILER) $(NVCCFLAGS) $(INCLUDES) -o pc_sampling_utility $< $(LIBS)
clean:
	rm pc_sampling_utility
